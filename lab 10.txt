3 Actividades
3.1 Direcciones de dispositivos I/O
a) Que ocurriria si dos dispositivos de entrada se asignan a la misma direccion de memoria?
Los dos guardarian a la vez los datos entonces los que tengan mayor prioridad o hayan hecho la ultima
accion es el que terminara guardando sus datos chancando los de entra del otro.
Podria tambien ocurrir un error de invasion de memoria.
b)Es posible conectar dos teclados al mismo bus? como se haria?
Windows esta preparado para un doble input del mismo tipo y de diferente dispositivo por ejemplo el
usar dos mouse y dos teclados ya estan contemplados sin causar mayor problema.
De todas maneras el que tenga prioridad para el sistema es el que terminara ingresando
y guardando datos antes que el segundo, lo que provocaria que el input se viera afectado si
se da a la vez en ambos dispositivos, mas no un error en invasion de memoria.
3.2 I/O mediante sondeo
a)
El CPU asume que se esta transmitiendo datos, caso General
En este caso se podría hacer una pequeña instrucción para suplantar los ciclos de reloj
que demore el beq en resolverse; esto representaria un gasto aparte aunque resolvería
fácilmente el problema.
Otra opción es la de cambiar el orden de caundo comprueba y lee la siguiente palabra,
haciendo que este orden este mucho más alejado, entonces se podría resolver este caso
sin la necesidad de añadir más instrucciones.
Se necesite una entrada crítica y no se puede continuar, caso especial
En este caso, es un caso particular en donde no se puede continuar hasta que sea seguro y
no se pierda la información, en este caso el problema con esta arquitectura no se podría
resolver tan fácil. La única opción es aislar ese caso y hacer de que en ese caso se asegure
que no se pierda la información.
b)
Tal vez el más eficiente para el usuario que precisa de velocidad más que de fiabilidad, se
podría utilizar la degunda opción donde se aisle ese caso en un caso especial, haciendo
que los casos especiales donde se requiera hacer esto se maneje de distinta manera; en
todo caso para los otros casos (que representan la gran mayoría de los casos de uso de los
usuarios) sea el mismo caso y el tiempo de respuesta no cambien ni crezca.
3.3 Procesadores Graficos
GEFORCE GTX Titan X
a)Todas las variables float usan funciones precicion de precision matematica en cuanto punto flotante
native_*  &  -cl-mad-enable mejoran el desempeño de los tipos.
las funciones anteriormente mencionadas mejoran las operaciones de forma reciproca a 2 por ciclo de
reloj, 0.88 operaciones por ciclo de reloj pero usando native_divide(x, y) se convierte en 1.6
https://www.nvidia.com/content/cudazone/download/opencl/nvidia_opencl_programmingguide.pdf
b)PUENTE SLI HB PARA GEFORCE GTX
El nuevo puente SLI de NVIDIA duplica el ancho de banda disponible para la transferencia de 
datos con respecto a la arquitectura Maxwell™. Proporciona una increíble fluidez de imagen
3.4 ARM
ARM tambien le ha dado mayor complejidad a sus instrucciones para obtener mejor desempeño, esto a su
vez sumado con su portabilidad pues fue diseñado para dispositivos mas pequeños, dando a lugar
procesadores de celulares y otros tipos de artefactos dentro de la categoria de moviles, los hace
confiables, su mayor problema es la falta de ARM en servidores.
ARM tiene TrustZone que es una mejora para la seguridad en cuanto a hardware y permiten manejo
de memoria a su vez que la virtualizacion de la misma y debido a estas se preparan para aplicaciones
que explotaran las mismas.

